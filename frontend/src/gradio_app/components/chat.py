"""
Chat interface component for the Gradio application.

This module defines the chat interface component for the Gradio application.
"""

import gradio as gr
from ..api_client import APIClient

class ChatInterface:
    """
    Chat interface component.
    
    This component provides a chat interface for the user to interact with the system.
    """
    
    def __init__(self, api_client: APIClient):
        """
        Initialize the chat interface.
        
        Args:
            api_client: The API client to use for communication with the backend.
        """
        self.api_client = api_client
        self.chat_history = []
    
    def create_interface(self) -> gr.Blocks:
        """
        Create the chat interface.
        
        Returns:
            The Gradio Blocks component for the chat interface.
        """
        with gr.Blocks() as chat_interface:
            gr.Markdown("# AutoGen Planner")
            gr.Markdown("Enter your request and get an execution plan generated by AI.")
            
            with gr.Row():
                with gr.Column(scale=4):
                    chatbot = gr.Chatbot(
                        label="Chat History",
                        height=400,
                        value=self.chat_history,
                    )
                    
                    with gr.Row():
                        user_input = gr.Textbox(
                            label="Your Request",
                            placeholder="Enter your request here...",
                            lines=3,
                        )
                        submit_button = gr.Button("Submit", variant="primary")
                
                with gr.Column(scale=2):
                    plan_display = gr.Markdown(
                        label="Execution Plan",
                        value="*No plan generated yet.*",
                    )
            
            def submit_request(message, history):
                # Add user message to history
                history.append((message, None))
                
                # Clear the input
                yield message, history, ""
                
                try:
                    # Get the plan from the API
                    plan = self.api_client.create_plan(message)
                    
                    # Update the history with the response
                    history[-1] = (message, "Plan generated successfully!")
                    
                    # Return the updated state
                    yield message, history, plan
                except Exception as e:
                    # Update the history with the error
                    history[-1] = (message, f"Error: {str(e)}")
                    
                    # Return the updated state
                    yield message, history, "*Error generating plan.*"
            
            # Connect the components
            submit_button.click(
                submit_request,
                inputs=[user_input, chatbot],
                outputs=[user_input, chatbot, plan_display],
            )
            
            user_input.submit(
                submit_request,
                inputs=[user_input, chatbot],
                outputs=[user_input, chatbot, plan_display],
            )
        
        return chat_interface 